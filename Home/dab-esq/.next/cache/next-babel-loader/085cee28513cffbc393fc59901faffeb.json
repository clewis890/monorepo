{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Slide from \"@material-ui/core/Slide\"; // @material-ui/icons\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\"; // core components\n\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Close from \"@material-ui/icons/Close\";\nimport emailjs from 'emailjs-com';\nimport { useForm } from 'react-hook-form';\nimport { ToastContainer } from 'react-nextjs-toast';\nimport styles from \"assets/jss/nextjs-material-kit/pages/landingPageSections/workStyle.js\";\nvar useStyles = makeStyles(styles);\nvar Transition = React.forwardRef(function Transition(props, ref) {\n  return __jsx(Slide, _extends({\n    direction: \"down\",\n    ref: ref\n  }, props));\n});\nexport default function WorkSection() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      classicModal = _React$useState2[0],\n      setClassicModal = _React$useState2[1];\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      watch = _useForm.watch,\n      errors = _useForm.errors;\n\n  var classes = useStyles(); // User can see how many characters they can type, out of\n  // the 1500 limit\n\n  var message_html = watch('message_html') || \"\";\n  var messageCharsLeft = 1500 - message_html.length;\n\n  var onSubmit = function onSubmit(data) {\n    // e.preventDefault();\n    console.log(data);\n    emailjs.sendForm('gmail', process.env.TEMPLATE_ID, process.env.USER_ID).then(function (response) {\n      console.log('SUCCESS!', response.status, response.text);\n    }, function (error) {\n      console.log('FAILED...', error);\n    });\n  }; //     .then((result) => {\n  //       alert(\"Message sent successfully!\");\n  //       return;\n  //     }, (error) => {\n  //       alert(\"There was an error. Please try again in a few minutes.\");\n  //         });\n  //       e.target.reset();  \n  // }\n  // function sendEmail(e) {\n  //   e.preventDefault();\n  //   emailjs.sendForm('gmail', process.env.TEMPLATE_ID, e.target, process.env.USER_ID)\n  //     .then((result) => {\n  //       alert(\"Message sent successfully!\")\n  //       return;\n  //     }, (error) => {\n  //       alert(\"There was an error. Please try again in a few minutes.\")\n  //         });\n  //       e.target.reset();\n  // }\n\n\n  return __jsx(\"div\", {\n    className: classes.section,\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginBottom: '20px'\n    }\n  }, __jsx(GridContainer, {\n    justify: \"center\",\n    className: classes.container\n  }, __jsx(GridItem, {\n    xs: 12,\n    md: 10,\n    lg: 10,\n    style: {\n      // boxShadow: \"0 4px 18px 0px rgba(0, 0, 0, 0.48), 0 7px 10px -5px rgba(0, 0, 0, 0.25)\", \n      // backdropFilter: 'blur(20px)', \n      backgroundColor: '#d6e0eb',\n      borderRadius: '6px',\n      padding: '20px, 5px, 25px, 5px',\n      margin: '15px, 5px'\n    }\n  }, __jsx(\"h2\", {\n    className: classes.title\n  }, \"Contact Me\"), __jsx(\"p\", {\n    className: classes.description\n  }, \"Send me a summary of your case, and I will reach out to schedule a consultation over the phone or video conference. The consultation is free of charge.\"), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    className: classes.textCenter\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"danger\",\n    onClick: function onClick() {\n      return setClassicModal(true);\n    }\n  }, \"Fill out Form\")), __jsx(Dialog, {\n    classes: {\n      root: classes.center,\n      paper: classes.modal\n    },\n    open: classicModal,\n    TransitionComponent: Transition,\n    keepMounted: true,\n    onClose: function onClose() {\n      return setClassicModal(false);\n    },\n    \"aria-labelledby\": \"classic-modal-slide-title\",\n    \"aria-describedby\": \"classic-modal-slide-description\"\n  }, __jsx(DialogTitle, {\n    id: \"classic-modal-slide-title\",\n    disableTypography: true,\n    className: classes.modalHeader\n  }, __jsx(IconButton, {\n    className: classes.modalCloseButton,\n    key: \"close\",\n    \"aria-label\": \"Close\",\n    color: \"inherit\",\n    onClick: function onClick() {\n      return setClassicModal(false);\n    }\n  }, __jsx(Close, {\n    className: classes.modalClose\n  })), __jsx(\"h4\", {\n    className: classes.modalTitle\n  }, \"Please include your name, email and a summary of your case so that I can review your case and schedule a consultation with you.\")), __jsx(DialogContent, {\n    id: \"classic-modal-slide-description\",\n    className: classes.modalBody\n  }, __jsx(\"form\", {\n    onClick: onSubmit,\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexWrap: 'wrap'\n    }\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 6\n  }, errors.from_name && errors.from_name.type === \"required\" && __jsx(\"div\", {\n    className: classes.alert,\n    role: \"alert\"\n  }, \"Name is required\"), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Your Name\",\n    className: classes.input,\n    id: \"name\",\n    fullWidth: true,\n    \"aria-invalid\": errors.from_name ? \"true\" : \"false\",\n    ref: register({\n      required: true // maxLength: {\n      //     value: 30,\n      //     message: \"Please enter a name with fewer than 30 characters\"\n      // }\n\n    }),\n    name: \"from_name\"\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 6\n  }, errors.reply_to && errors.reply_to.type === \"required\" && __jsx(\"div\", {\n    className: classes.alert,\n    role: \"alert\"\n  }, \"Please enter a valid email address.\"), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Your Email\",\n    className: classes.input,\n    id: \"email\",\n    fullWidth: \"true\",\n    ref: register({\n      required: true // pattern: {\n      //     value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]{2,}$/i,\n      //     message: \"invalid email address\"\n      // }\n\n    }),\n    name: \"reply_to\"\n  })), __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, errors.message_html && errors.message_html.type === \"required\" && __jsx(\"div\", {\n    className: classes.alert,\n    role: \"alert\"\n  }, \"Please enter a message.\"), __jsx(\"textarea\", {\n    type: \"text\",\n    style: {\n      maxWidth: '525px',\n      maxHeight: '600px'\n    },\n    className: classes.input,\n    placeholder: \"Summary of Your Case\",\n    id: \"message\",\n    maxLength: \"1500\",\n    fullwidth: true,\n    autoresize: true,\n    rows: \"5\",\n    columns: \"15\",\n    ref: register({\n      required: true\n    }),\n    name: \"message_html\"\n  }), __jsx(\"p\", {\n    style: {\n      marginLeft: '15px'\n    },\n    className: \"message-chars-left\"\n  }, messageCharsLeft)), __jsx(DialogActions, {\n    className: classes.modalFooter\n  }, __jsx(Button, {\n    key: \"close\",\n    \"aria-label\": \"Close\",\n    color: \"inherit\",\n    onClick: function onClick() {\n      return setClassicModal(false);\n    },\n    variant: \"outlined\"\n  }, \"Close\"), __jsx(Button, {\n    href: \"\",\n    variant: \"outlined\",\n    value: \"Submit\",\n    name: \"btnSubmit\",\n    type: \"submit\",\n    color: \"success\" // onClick={handleSubmit(onSubmit)}\n    ,\n    formNoValidate: true\n  }, \"Book Consultation\"))))))));\n} //**************************************** */\n// USE THIS IF THE IMPLEMENTATION ABOVE DOESN'T WORK ****\n//*\n// export default function WorkSection() {\n//   const [classicModal, setClassicModal] = React.useState(false);\n//   const { register, handleSubmit, watch, errors } = useForm();\n//   const classes = useStyles();\n//     // User can see how many characters they can type, out of\n//     // the 1500 limit\n//   const message_html = watch('message_html') || \"\";\n//   const messageCharsLeft = 1500 - message_html.length;\n//   const onSubmit = (data) => { \n//     // e.preventDefault();\n//     console.log(data);\n//     emailjs.sendForm('gmail', process.env.TEMPLATE_ID, process.env.USER_ID)\n//       .then(function(response) {\n//         console.log('SUCCESS!', response.status, response.text);\n//       }, function(error) {\n//         console.log('FAILED...', error);\n//       });\n//   };\n//     //     .then((result) => {\n//   //       alert(\"Message sent successfully!\");\n//   //       return;\n//   //     }, (error) => {\n//   //       alert(\"There was an error. Please try again in a few minutes.\");\n//   //         });\n//   //       e.target.reset();  \n//   // }\n//   // function sendEmail(e) {\n//   //   e.preventDefault();\n//   //   emailjs.sendForm('gmail', process.env.TEMPLATE_ID, e.target, process.env.USER_ID)\n//   //     .then((result) => {\n//   //       alert(\"Message sent successfully!\")\n//   //       return;\n//   //     }, (error) => {\n//   //       alert(\"There was an error. Please try again in a few minutes.\")\n//   //         });\n//   //       e.target.reset();\n//   // }\n//   return (\n//      <div className={classes.section} style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>\n//       <GridContainer justify=\"center\" className={classes.container}>\n//         <GridItem xs={12} md={10} lg={10} \n//         style={{ \n//           // boxShadow: \"0 4px 18px 0px rgba(0, 0, 0, 0.48), 0 7px 10px -5px rgba(0, 0, 0, 0.25)\", \n//           // backdropFilter: 'blur(20px)', \n//           backgroundColor: '#d6e0eb', borderRadius: '6px', padding: '20px, 5px, 25px, 5px', margin: '15px, 5px' }}\n//         >\n//           <h2 className={classes.title}>Contact Me</h2>\n//             <p className={classes.description}>\n//               Send me a summary of your case, and I will reach out \n//               to schedule a consultation over the phone or video conference.\n//               The consultation is free of charge.            \n//             </p>\n//               <GridItem xs={12} sm={12} md={12} className={classes.textCenter}>\n//                 <Button \n//                   variant=\"contained\"\n//                   color=\"danger\"\n//                   onClick={() => setClassicModal(true)}\n//                 >\n//                   Fill out Form\n//                 </Button>\n//                 </GridItem>\n//                    <Dialog\n//                       classes={{\n//                         root: classes.center,\n//                         paper: classes.modal\n//                       }}\n//                       open={classicModal}\n//                       TransitionComponent={Transition}\n//                       keepMounted\n//                       onClose={() => setClassicModal(false)}\n//                       aria-labelledby=\"classic-modal-slide-title\"\n//                       aria-describedby=\"classic-modal-slide-description\"\n//                     >\n//                     <DialogTitle\n//                       id=\"classic-modal-slide-title\"\n//                       disableTypography\n//                       className={classes.modalHeader}\n//                     >\n//                     <IconButton\n//                       className={classes.modalCloseButton}\n//                       key=\"close\"\n//                       aria-label=\"Close\"\n//                       color=\"inherit\"\n//                       onClick={() => setClassicModal(false)}\n//                     >\n//                       <Close className={classes.modalClose} />\n//                     </IconButton>\n//                     <h4 className={classes.modalTitle}>\n//                       Please include your name, email and a summary of your case so that I can review your case and schedule a consultation with you.\n//                     </h4>\n//                   </DialogTitle>\n//                   <DialogContent\n//                     id=\"classic-modal-slide-description\"\n//                     className={classes.modalBody}\n//                   >\n//                     {/* <ContactForm /> */}\n//                     {/** INSERT FORM BELOW? */}\n//             <form \n//             onClick={onSubmit}\n//             style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap' }}\n//             >\n//             {/* <GridContainer className={classes.formContainer}> */}\n//               <GridItem xs={12} sm={12} md={6}>\n//                  {errors.from_name && errors.from_name.type === \"required\" && (\n//                   <div className={classes.alert} role=\"alert\">Name is required</div>\n//                 )}\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Your Name\"\n//                   className={classes.input}\n//                   id=\"name\"\n//                   fullWidth\n//                   aria-invalid={errors.from_name ? \"true\" : \"false\"}\n//                   ref={ register({ required: true\n//                       // maxLength: {\n//                       //     value: 30,\n//                       //     message: \"Please enter a name with fewer than 30 characters\"\n//                       // }\n//                     })\n//                   }\n//                   name=\"from_name\" \n//                 />\n//               </GridItem>\n//               <GridItem xs={12} sm={12} md={6}>\n//                {errors.reply_to && errors.reply_to.type === \"required\" && (\n//                   <div className={classes.alert} role=\"alert\">Please enter a valid email address.</div>\n//                 )}\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Your Email\"\n//                   className={classes.input}\n//                   id=\"email\"\n//                   fullWidth=\"true\"\n//                   ref={\n//                     register({\n//                         required: true,\n//                         // pattern: {\n//                         //     value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]{2,}$/i,\n//                         //     message: \"invalid email address\"\n//                         // }\n//                     })\n//                   }\n//                   name=\"reply_to\" \n//                 />\n//               </GridItem>\n//               <GridItem xs={12} sm={12} md={12}>\n//                {errors.message_html && errors.message_html.type === \"required\" && (\n//                   <div className={classes.alert} role=\"alert\">Please enter a message.</div>\n//                 )}\n//               <textarea\n//                 type=\"text\"\n//                 style={{ maxWidth: '525px', maxHeight: '600px' }}\n//                 className={classes.input}\n//                 placeholder=\"Summary of Your Case\"\n//                 id=\"message\"\n//                 maxLength='1500'\n//                 fullwidth\n//                 autoresize\n//                 rows='5'\n//                 columns=\"15\"\n//                 ref={ register({ required: true })\n//                 }\n//                 name=\"message_html\"\n//               />\n//               <p style={{ marginLeft: '15px' }} className=\"message-chars-left\">{messageCharsLeft}</p>\n//               </GridItem>\n//               <DialogActions className={classes.modalFooter}>\n//                 <Button\n//                       key=\"close\"\n//                       aria-label=\"Close\"\n//                       color=\"inherit\"\n//                       onClick={() => setClassicModal(false)}\n//                       variant=\"outlined\"\n//                     >\n//                     Close\n//                     </Button>\n//                     <Button \n//                     href=\"\"\n//                     variant=\"outlined\"\n//                     value=\"Submit\"\n//                     name=\"btnSubmit\"\n//                     type=\"submit\"\n//                     color=\"success\"\n//                     // onClick={handleSubmit(onSubmit)}\n//                     formNoValidate={true}\n//                     >\n//                     Book Consultation\n//                     </Button>\n//                   </DialogActions>\n//             {/* </GridContainer> */}\n//             </form>\n//                 </DialogContent>\n//                   {/* <DialogActions \n//                     className={classes.modalFooter}\n//                   >\n//                     <Button\n//                       key=\"close\"\n//                       aria-label=\"Close\"\n//                       color=\"inherit\"\n//                       onClick={() => setClassicModal(false)}\n//                       variant=\"outlined\"\n//                     >\n//                     Close\n//                     </Button>\n//                     <Button \n//                     href=\"\"\n//                     variant=\"outlined\"\n//                     value=\"Send\"\n//                     type=\"submit\"\n//                     color=\"success\"\n//                     formNoValidate={true}\n//                     >\n//                     Book Consultation\n//                     </Button>\n//                   </DialogActions> */}\n//                 </Dialog>\n//                </GridItem>\n//       </GridContainer>\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["C:/next-projects/dab-esq/pages-sections/LandingPage-Sections/WorkSection.js"],"names":["React","useState","makeStyles","Slide","IconButton","Dialog","DialogTitle","DialogContent","DialogActions","GridContainer","GridItem","CustomInput","Button","Modal","Close","emailjs","useForm","ToastContainer","styles","useStyles","Transition","forwardRef","props","ref","WorkSection","classicModal","setClassicModal","register","handleSubmit","watch","errors","classes","message_html","messageCharsLeft","length","onSubmit","data","console","log","sendForm","process","env","TEMPLATE_ID","USER_ID","then","response","status","text","error","section","display","justifyContent","marginBottom","container","backgroundColor","borderRadius","padding","margin","title","description","textCenter","root","center","paper","modal","modalHeader","modalCloseButton","modalClose","modalTitle","modalBody","flexWrap","from_name","type","alert","input","required","reply_to","maxWidth","maxHeight","marginLeft","modalFooter"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Slide from \"@material-ui/core/Slide\";\n\n// @material-ui/icons\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\n\n// core components\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport Modal from \"@material-ui/core/Modal\"\nimport Close from \"@material-ui/icons/Close\";\nimport emailjs from 'emailjs-com'\nimport { useForm } from 'react-hook-form'\nimport { ToastContainer } from 'react-nextjs-toast'\n\nimport styles from \"assets/jss/nextjs-material-kit/pages/landingPageSections/workStyle.js\";\n\nconst useStyles = makeStyles(styles);\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return (\n    <Slide direction=\"down\" ref={ref} {...props} />\n  );\n});\n\nexport default function WorkSection() {\n  const [classicModal, setClassicModal] = React.useState(false);\n  const { register, handleSubmit, watch, errors } = useForm();\n\n  const classes = useStyles();\n\n    // User can see how many characters they can type, out of\n    // the 1500 limit\n    \n  const message_html = watch('message_html') || \"\";\n  const messageCharsLeft = 1500 - message_html.length;\n\n  const onSubmit = (data) => { \n    // e.preventDefault();\n    console.log(data);\n    emailjs.sendForm('gmail', process.env.TEMPLATE_ID, process.env.USER_ID)\n      .then(function(response) {\n        console.log('SUCCESS!', response.status, response.text);\n      }, function(error) {\n        console.log('FAILED...', error);\n      });\n  };\n    //     .then((result) => {\n  //       alert(\"Message sent successfully!\");\n  //       return;\n  //     }, (error) => {\n  //       alert(\"There was an error. Please try again in a few minutes.\");\n  //         });\n  //       e.target.reset();  \n  // }\n\n  // function sendEmail(e) {\n  //   e.preventDefault();\n\n  //   emailjs.sendForm('gmail', process.env.TEMPLATE_ID, e.target, process.env.USER_ID)\n  //     .then((result) => {\n  //       alert(\"Message sent successfully!\")\n  //       return;\n  //     }, (error) => {\n  //       alert(\"There was an error. Please try again in a few minutes.\")\n  //         });\n  //       e.target.reset();\n  // }\n  \n  return (\n     <div className={classes.section} style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>\n      <GridContainer justify=\"center\" className={classes.container}>\n        <GridItem xs={12} md={10} lg={10} \n        style={{ \n          // boxShadow: \"0 4px 18px 0px rgba(0, 0, 0, 0.48), 0 7px 10px -5px rgba(0, 0, 0, 0.25)\", \n          // backdropFilter: 'blur(20px)', \n          backgroundColor: '#d6e0eb', borderRadius: '6px', padding: '20px, 5px, 25px, 5px', margin: '15px, 5px' }}\n        >\n          <h2 className={classes.title}>Contact Me</h2>\n            <p className={classes.description}>\n              Send me a summary of your case, and I will reach out \n              to schedule a consultation over the phone or video conference.\n              The consultation is free of charge.            \n            </p>\n              <GridItem xs={12} sm={12} md={12} className={classes.textCenter}>\n                <Button \n                  variant=\"contained\"\n                  color=\"danger\"\n                  onClick={() => setClassicModal(true)}\n                >\n                  Fill out Form\n                </Button>\n                </GridItem>\n                   <Dialog\n                      classes={{\n                        root: classes.center,\n                        paper: classes.modal\n                      }}\n                      open={classicModal}\n                      TransitionComponent={Transition}\n                      keepMounted\n                      onClose={() => setClassicModal(false)}\n                      aria-labelledby=\"classic-modal-slide-title\"\n                      aria-describedby=\"classic-modal-slide-description\"\n                    >\n                    <DialogTitle\n                      id=\"classic-modal-slide-title\"\n                      disableTypography\n                      className={classes.modalHeader}\n                    >\n                    <IconButton\n                      className={classes.modalCloseButton}\n                      key=\"close\"\n                      aria-label=\"Close\"\n                      color=\"inherit\"\n                      onClick={() => setClassicModal(false)}\n                    >\n                      <Close className={classes.modalClose} />\n                    </IconButton>\n                    <h4 className={classes.modalTitle}>\n                      Please include your name, email and a summary of your case so that I can review your case and schedule a consultation with you.\n                    </h4>\n                  </DialogTitle>\n                  <DialogContent\n                    id=\"classic-modal-slide-description\"\n                    className={classes.modalBody}\n                  >\n                    {/* <ContactForm /> */}\n                    {/** INSERT FORM BELOW? */}\n\n            <form \n            onClick={onSubmit}\n            style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap' }}\n            >\n            {/* <GridContainer className={classes.formContainer}> */}\n              <GridItem xs={12} sm={12} md={6}>\n                 {errors.from_name && errors.from_name.type === \"required\" && (\n                  <div className={classes.alert} role=\"alert\">Name is required</div>\n                )}\n                <input\n                  type=\"text\"\n                  placeholder=\"Your Name\"\n                  className={classes.input}\n                  id=\"name\"\n                  fullWidth\n                  aria-invalid={errors.from_name ? \"true\" : \"false\"}\n                  ref={ register({ required: true\n                      // maxLength: {\n                      //     value: 30,\n                      //     message: \"Please enter a name with fewer than 30 characters\"\n                      // }\n                    })\n                  }\n                  name=\"from_name\" \n                />\n              </GridItem>\n              <GridItem xs={12} sm={12} md={6}>\n               {errors.reply_to && errors.reply_to.type === \"required\" && (\n                  <div className={classes.alert} role=\"alert\">Please enter a valid email address.</div>\n                )}\n                <input\n                  type=\"text\"\n                  placeholder=\"Your Email\"\n                  className={classes.input}\n                  id=\"email\"\n                  fullWidth=\"true\"\n                  ref={\n                    register({\n                        required: true,\n                        // pattern: {\n                        //     value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]{2,}$/i,\n                        //     message: \"invalid email address\"\n                        // }\n                    })\n                  }\n                  name=\"reply_to\" \n                />\n              </GridItem>\n              <GridItem xs={12} sm={12} md={12}>\n               {errors.message_html && errors.message_html.type === \"required\" && (\n                  <div className={classes.alert} role=\"alert\">Please enter a message.</div>\n                )}\n              <textarea\n                type=\"text\"\n                style={{ maxWidth: '525px', maxHeight: '600px' }}\n                className={classes.input}\n                placeholder=\"Summary of Your Case\"\n                id=\"message\"\n                maxLength='1500'\n                fullwidth\n                autoresize\n                rows='5'\n                columns=\"15\"\n                ref={ register({ required: true })\n                }\n                name=\"message_html\"\n              />\n              <p style={{ marginLeft: '15px' }} className=\"message-chars-left\">{messageCharsLeft}</p>\n              </GridItem>\n              <DialogActions className={classes.modalFooter}>\n                <Button\n                      key=\"close\"\n                      aria-label=\"Close\"\n                      color=\"inherit\"\n                      onClick={() => setClassicModal(false)}\n                      variant=\"outlined\"\n                    >\n                    Close\n                    </Button>\n                    <Button \n                    href=\"\"\n                    variant=\"outlined\"\n                    value=\"Submit\"\n                    name=\"btnSubmit\"\n                    type=\"submit\"\n                    color=\"success\"\n                    // onClick={handleSubmit(onSubmit)}\n                    formNoValidate={true}\n                    >\n                    Book Consultation\n                    </Button>\n                   \n                  </DialogActions>\n            {/* </GridContainer> */}\n            </form>\n                </DialogContent>\n                  {/* <DialogActions \n                    className={classes.modalFooter}\n                  >\n                    <Button\n                      key=\"close\"\n                      aria-label=\"Close\"\n                      color=\"inherit\"\n                      onClick={() => setClassicModal(false)}\n                      variant=\"outlined\"\n                    >\n                    Close\n                    </Button>\n                    <Button \n                    href=\"\"\n                    variant=\"outlined\"\n                    value=\"Send\"\n                    type=\"submit\"\n                    color=\"success\"\n                    formNoValidate={true}\n                    >\n                    Book Consultation\n                    </Button>\n                   \n                  </DialogActions> */}\n                </Dialog>\n               </GridItem>\n      </GridContainer>\n    </div>\n  );\n}\n\n\n//**************************************** */\n// USE THIS IF THE IMPLEMENTATION ABOVE DOESN'T WORK ****\n//*\n// export default function WorkSection() {\n//   const [classicModal, setClassicModal] = React.useState(false);\n//   const { register, handleSubmit, watch, errors } = useForm();\n\n//   const classes = useStyles();\n\n//     // User can see how many characters they can type, out of\n//     // the 1500 limit\n    \n//   const message_html = watch('message_html') || \"\";\n//   const messageCharsLeft = 1500 - message_html.length;\n\n//   const onSubmit = (data) => { \n//     // e.preventDefault();\n//     console.log(data);\n//     emailjs.sendForm('gmail', process.env.TEMPLATE_ID, process.env.USER_ID)\n//       .then(function(response) {\n//         console.log('SUCCESS!', response.status, response.text);\n//       }, function(error) {\n//         console.log('FAILED...', error);\n//       });\n//   };\n//     //     .then((result) => {\n//   //       alert(\"Message sent successfully!\");\n//   //       return;\n//   //     }, (error) => {\n//   //       alert(\"There was an error. Please try again in a few minutes.\");\n//   //         });\n//   //       e.target.reset();  \n//   // }\n\n//   // function sendEmail(e) {\n//   //   e.preventDefault();\n\n//   //   emailjs.sendForm('gmail', process.env.TEMPLATE_ID, e.target, process.env.USER_ID)\n//   //     .then((result) => {\n//   //       alert(\"Message sent successfully!\")\n//   //       return;\n//   //     }, (error) => {\n//   //       alert(\"There was an error. Please try again in a few minutes.\")\n//   //         });\n//   //       e.target.reset();\n//   // }\n  \n//   return (\n//      <div className={classes.section} style={{ display: 'flex', justifyContent: 'center', marginBottom: '20px' }}>\n//       <GridContainer justify=\"center\" className={classes.container}>\n//         <GridItem xs={12} md={10} lg={10} \n//         style={{ \n//           // boxShadow: \"0 4px 18px 0px rgba(0, 0, 0, 0.48), 0 7px 10px -5px rgba(0, 0, 0, 0.25)\", \n//           // backdropFilter: 'blur(20px)', \n//           backgroundColor: '#d6e0eb', borderRadius: '6px', padding: '20px, 5px, 25px, 5px', margin: '15px, 5px' }}\n//         >\n//           <h2 className={classes.title}>Contact Me</h2>\n//             <p className={classes.description}>\n//               Send me a summary of your case, and I will reach out \n//               to schedule a consultation over the phone or video conference.\n//               The consultation is free of charge.            \n//             </p>\n//               <GridItem xs={12} sm={12} md={12} className={classes.textCenter}>\n//                 <Button \n//                   variant=\"contained\"\n//                   color=\"danger\"\n//                   onClick={() => setClassicModal(true)}\n//                 >\n//                   Fill out Form\n//                 </Button>\n//                 </GridItem>\n//                    <Dialog\n//                       classes={{\n//                         root: classes.center,\n//                         paper: classes.modal\n//                       }}\n//                       open={classicModal}\n//                       TransitionComponent={Transition}\n//                       keepMounted\n//                       onClose={() => setClassicModal(false)}\n//                       aria-labelledby=\"classic-modal-slide-title\"\n//                       aria-describedby=\"classic-modal-slide-description\"\n//                     >\n//                     <DialogTitle\n//                       id=\"classic-modal-slide-title\"\n//                       disableTypography\n//                       className={classes.modalHeader}\n//                     >\n//                     <IconButton\n//                       className={classes.modalCloseButton}\n//                       key=\"close\"\n//                       aria-label=\"Close\"\n//                       color=\"inherit\"\n//                       onClick={() => setClassicModal(false)}\n//                     >\n//                       <Close className={classes.modalClose} />\n//                     </IconButton>\n//                     <h4 className={classes.modalTitle}>\n//                       Please include your name, email and a summary of your case so that I can review your case and schedule a consultation with you.\n//                     </h4>\n//                   </DialogTitle>\n//                   <DialogContent\n//                     id=\"classic-modal-slide-description\"\n//                     className={classes.modalBody}\n//                   >\n//                     {/* <ContactForm /> */}\n//                     {/** INSERT FORM BELOW? */}\n\n//             <form \n//             onClick={onSubmit}\n//             style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap' }}\n//             >\n//             {/* <GridContainer className={classes.formContainer}> */}\n//               <GridItem xs={12} sm={12} md={6}>\n//                  {errors.from_name && errors.from_name.type === \"required\" && (\n//                   <div className={classes.alert} role=\"alert\">Name is required</div>\n//                 )}\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Your Name\"\n//                   className={classes.input}\n//                   id=\"name\"\n//                   fullWidth\n//                   aria-invalid={errors.from_name ? \"true\" : \"false\"}\n//                   ref={ register({ required: true\n//                       // maxLength: {\n//                       //     value: 30,\n//                       //     message: \"Please enter a name with fewer than 30 characters\"\n//                       // }\n//                     })\n//                   }\n//                   name=\"from_name\" \n//                 />\n//               </GridItem>\n//               <GridItem xs={12} sm={12} md={6}>\n//                {errors.reply_to && errors.reply_to.type === \"required\" && (\n//                   <div className={classes.alert} role=\"alert\">Please enter a valid email address.</div>\n//                 )}\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Your Email\"\n//                   className={classes.input}\n//                   id=\"email\"\n//                   fullWidth=\"true\"\n//                   ref={\n//                     register({\n//                         required: true,\n//                         // pattern: {\n//                         //     value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]{2,}$/i,\n//                         //     message: \"invalid email address\"\n//                         // }\n//                     })\n//                   }\n//                   name=\"reply_to\" \n//                 />\n//               </GridItem>\n//               <GridItem xs={12} sm={12} md={12}>\n//                {errors.message_html && errors.message_html.type === \"required\" && (\n//                   <div className={classes.alert} role=\"alert\">Please enter a message.</div>\n//                 )}\n//               <textarea\n//                 type=\"text\"\n//                 style={{ maxWidth: '525px', maxHeight: '600px' }}\n//                 className={classes.input}\n//                 placeholder=\"Summary of Your Case\"\n//                 id=\"message\"\n//                 maxLength='1500'\n//                 fullwidth\n//                 autoresize\n//                 rows='5'\n//                 columns=\"15\"\n//                 ref={ register({ required: true })\n//                 }\n//                 name=\"message_html\"\n//               />\n//               <p style={{ marginLeft: '15px' }} className=\"message-chars-left\">{messageCharsLeft}</p>\n//               </GridItem>\n//               <DialogActions className={classes.modalFooter}>\n//                 <Button\n//                       key=\"close\"\n//                       aria-label=\"Close\"\n//                       color=\"inherit\"\n//                       onClick={() => setClassicModal(false)}\n//                       variant=\"outlined\"\n//                     >\n//                     Close\n//                     </Button>\n//                     <Button \n//                     href=\"\"\n//                     variant=\"outlined\"\n//                     value=\"Submit\"\n//                     name=\"btnSubmit\"\n//                     type=\"submit\"\n//                     color=\"success\"\n//                     // onClick={handleSubmit(onSubmit)}\n//                     formNoValidate={true}\n//                     >\n//                     Book Consultation\n//                     </Button>\n                   \n//                   </DialogActions>\n//             {/* </GridContainer> */}\n//             </form>\n//                 </DialogContent>\n//                   {/* <DialogActions \n//                     className={classes.modalFooter}\n//                   >\n//                     <Button\n//                       key=\"close\"\n//                       aria-label=\"Close\"\n//                       color=\"inherit\"\n//                       onClick={() => setClassicModal(false)}\n//                       variant=\"outlined\"\n//                     >\n//                     Close\n//                     </Button>\n//                     <Button \n//                     href=\"\"\n//                     variant=\"outlined\"\n//                     value=\"Send\"\n//                     type=\"submit\"\n//                     color=\"success\"\n//                     formNoValidate={true}\n//                     >\n//                     Book Consultation\n//                     </Button>\n                   \n//                   </DialogActions> */}\n//                 </Dialog>\n//                </GridItem>\n//       </GridContainer>\n//     </div>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}